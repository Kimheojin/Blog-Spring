name: Deploy onpress server (please check state server idle)
on:
  push:
    branches:
      - Deploy
  pull_request:
    branches:
      - Deploy
  workflow_dispatch:

jobs:
  build:
    runs-on: [self-hosted, Linux, X64]
    steps:
      - uses: actions/checkout@v3

      - name: Check if secrets are available
        run: |
          if [ -n "${{ secrets.DB_NAME }}" ]; then
            echo "DB_NAME is set ✓"
          else
            echo "DB_NAME is not set ✗"
          fi
          
          if [ -n "${{ secrets.DB_USERNAME }}" ]; then
            echo "DB_USERNAME is set ✓"
          else
            echo "DB_USERNAME is not set ✗"
          fi
          
          if [ -n "${{ secrets.DB_PASSWORD }}" ]; then
            echo "DB_PASSWORD is set ✓"
          else
            echo "DB_PASSWORD is not set ✗"
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Generate QueryDSL Q-classes
        run: ./gradlew compileQuerydsl

      - name: Build image
        run: docker build -t blog:latest .

      - name: Stop and remove existing container
        run: |
          docker stop blog || true
          docker rm blog || true

      - name: Setup network
        run: |
          docker network inspect blog-network >/dev/null 2>&1 || docker network create blog-network
          if ! docker network inspect blog-network | grep -q "mysql-container"; then
            docker network connect blog-network mysql-container || echo "Failed to connect mysql-container to network"
          fi

      - name: Run container
        env:
          DB_URL: jdbc:mysql://mysql-container:3306/${{ secrets.DB_NAME }}?useSSL=false&allowPublicKeyRetrieval=true
          DB_USER: ${{ secrets.DB_USERNAME }}
          DB_PASS: ${{ secrets.DB_PASSWORD }}
        run: |
          docker run -d -p 8080:8080 \
            -e SPRING_DATASOURCE_URL="$DB_URL" \
            -e SPRING_DATASOURCE_USERNAME="$DB_USER" \
            -e SPRING_DATASOURCE_PASSWORD="$DB_PASS" \
            --network blog-network \
            --name blog blog:latest
          docker network connect my-network blog